#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2020 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def _hpsa_make_key(controller, key, line):
    description = {'array': 'Array',
                   'logicaldrive': 'Logical Drive',
                   'physicaldrive': 'Physical Drive'}
    return "%s %s %s" % (controller, description[key], line[1])

def parse_hpsa(info):
    parsed = {'array': {}, 'logicaldrive': {}, 'physicaldrive': {}}
    currentarray = None
    controller = None
    for line in info:
        if line[0] == u'Smart' and line[1] == u'Array':
            controller = " ".join(line[0:6])
        for key in parsed:
            if line[0].lower() == key:
                parsed[key][_hpsa_make_key(controller, key, line)] = {'info': (" ".join(line[2:]))[1:-1].split(', ')}
                if key == 'array':
                    currentarray = _hpsa_make_key(controller, key, line)
                if currentarray:
                    parsed[key][_hpsa_make_key(controller, key, line)]['array'] = currentarray
        if " ".join(line) == "HP RAID check tool not installed.":
            parsed['not_installed'] = True
    return parsed

def inventory_hpsa(parsed):
    if 'not_installed' in parsed:
        yield None, None

def check_hpsa(_no_item, _no_params, parsed):
    return 1, 'HP RAID Tool not installed. Please install ssacli, hpssacli or hpacucli.'

check_info['hpsa'] = {
    'parse_function':      parse_hpsa,
    'inventory_function':  inventory_hpsa,
    'check_function':      check_hpsa,
    'service_description': 'HP Raid Tool',
    'has_perfdata':        False,
}

def inventory_hpsa_array(parsed):
    for array, data in parsed['array'].iteritems():
        yield array, {}

def check_hpsa_array(item, _no_params, parsed):
    if item in parsed['array']:
        data = parsed['array'][item]
        return 0, ", ".join(data['info'])

check_info['hpsa.array'] = {
    'inventory_function':  inventory_hpsa_array,
    'check_function':      check_hpsa_array,
    'service_description': "HP RAID %s",
    'has_perfdata':        False,
}

def inventory_hpsa_logicaldrive(parsed):
    for ld, data in parsed['logicaldrive'].iteritems():
        yield ld, {}

def check_hpsa_logicaldrive(item, _no_params, parsed):
    if item in parsed['logicaldrive']:
        data = parsed['logicaldrive'][item]
        state = 0
        if data['info'][2] != 'OK':
            state = 2
        return state, (' '.join(data['info'])) + ", Array " + data['array']

check_info['hpsa.logicaldrive'] = {
    'inventory_function':  inventory_hpsa_logicaldrive,
    'check_function':      check_hpsa_logicaldrive,
    'service_description': "HP RAID %s",
    'has_perfdata':        False,
}

def inventory_hpsa_physicaldrive(parsed):
    for pd, data in parsed['physicaldrive'].iteritems():
        yield pd, {}

def check_hpsa_physicaldrive(item, _no_params, parsed):
    if item in parsed['physicaldrive']:
        data = parsed['physicaldrive'][item]
        state = 0
        if data['info'][3] != 'OK':
            state = 2
        return state, (' '.join(data['info'])) + ", Array " + data['array']

check_info['hpsa.physicaldrive'] = {
    'inventory_function':  inventory_hpsa_physicaldrive,
    'check_function':      check_hpsa_physicaldrive,
    'service_description': "HP RAID %s",
    'has_perfdata':        False,
}
