#!/bin/bash

# (c) 2020 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

addNumbers () {
  local IFS='+'
  printf "%s\n" "$(( $* ))"
}

provisionedSpace () {
  addNumbers $( find "$1" -type f | while read image; do
    qemu-img info $image | awk '/^virtual size: / { print substr($5, 2) }'
  done )
}

if [ -r /etc/pve/storage.cfg ]; then
  echo '<<<esx_vsphere_datastores>>>'
  cat /etc/pve/storage.cfg | while read key value; do
    if [ "$key" = "disable" ]; then
      enabled=""
    fi
    case "$key" in
      "dir:"|"nfs:"|"lvmthin:")
        dsname=$value
	enabled=true
	thinpool=""
	vgname=""
        ;;
      "*:")
        dsname=""
        ;;
    esac
    if [ "$key" = "path" -a -n "$dsname" -a -n "$enabled" ]; then
      dir=$value
      if [ -d $dir/images ]; then
        df=$(df -T -B 1 $dir | tail -1)
        capacity=$(echo $df | awk '{ print $3; }')
        total_used=$(echo $df | awk '{print $4; }')
        typ=$(echo $df | awk '{ print $2 }' )
        used=$(du -B 1 -s $dir/images | cut -f 1 -d "	")
        prov=$(provisionedSpace $dir/images/)
        total_cap=$(($capacity - $total_used + $used))
        echo "[$dsname]"
        echo "url $dir"
        echo "accessible True"
        echo "type $typ"
        echo "capacity $total_cap"
        echo "freeSpace $(($total_cap - $used))"
        if [ $prov -gt 0 ]; then
          echo "uncommitted $(($prov - $used))"
        else
          echo "uncommitted 0"
        fi
      fi
    fi
    if [ "$key" = "thinpool" ]; then
      thinpool=$value
    fi
    if [ "$key" = "vgname" -a -n "$dsname" -a -n "$enabled" ]; then
      vgname=$value
      capacity=0
      total_used=0
      used=0
      prov=0

      while read lv vg flags size pool percent; do
        if [ $lv = $thinpool ]; then
          capacity=$size
	  total_used=$(echo "$size * $pool / 100" | bc)
	elif [ -n "$percent" ]; then
          lvused=$(echo "$size * $percent / 100" | bc)
	  used=$(( $used + $lvused ))
	  prov=$(( $prov + $size ))
	fi
      done <<<$( lvs --units b --no-suffix --no-heading $vgname )

      echo "[$dsname]"
      echo "url /dev/$vgname"
      echo "accessible True"
      echo "type lvmthin"
      echo "capacity $capacity"
      echo "freeSpace $(($capacity - $total_used))"
      if [ $prov -gt 0 ]; then
        echo "uncommitted $(($prov - $used))"
      else
        echo "uncommitted 0"
      fi
    fi
  done
fi
