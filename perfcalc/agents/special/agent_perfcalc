#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

import base64
import pickle
import sys
import os, os.path
import socket
import json
import math

import pprint

home = os.environ.get('OMD_ROOT')
if home:
    localsocketname = home + '/tmp/run/live'
else:
    print("Unable to get OMD_ROOT")
    sys.exit(3)

# Parameters are base64 encoded pickle data
params = pickle.loads(base64.decodebytes(('\n'.join(sys.argv[1:])).encode('ascii')))

def debug_output(var):
    if params['debug']:
        pprint.pprint(var)

def lqencode(s):
    return s.replace('\n', '')
        
def load_sites():
    sites_mk = os.path.join(os.environ.get('OMD_ROOT'),
                            "etc/check_mk/multisite.d/sites.mk")
    try:
        if not os.path.exists(sites_mk):
            return {}

        vars = { "sites" : {} }
        execfile(sites_mk, vars, vars)

        for site in vars['sites'].values():
            if site.get('socket') == 'disabled':
                site['disabled'] = True
                del site['socket']

        if not vars["sites"]:
            return {}
        else:
            return vars["sites"]

    except Exception:
        return {}

#
# MKLivestatus helper from https://github.com/arthru/python-mk-livestatus
# Copyright (c) 2011, Michael Fladischer
#

class Query(object):
    def __init__(self, conn, resource):
        self._conn = conn
        self._resource = resource
        self._columns = []
        self._filters = []
        self._stats = []

    def call(self):
        try:
            data = bytes(str(self), 'utf-8')
        except TypeError:
            data = str(self)
        return self._conn.call(data)

    __call__ = call

    def __str__(self):
        request = 'GET %s' % (self._resource)
        if self._columns and any(self._columns):
            request += '\nColumns: %s' % (' '.join(self._columns))
        if self._filters:
            for filter_line in self._filters:
                if filter_line.startswith('Or: ') or filter_line.startswith('And: '):
                    request += '\n%s' % (filter_line)
                else:
                    request += '\nFilter: %s' % (filter_line)
        if self._stats:
            for stats_line in self._stats:
                request += '\nStats: %s' % (stats_line)
        request += '\nOutputFormat: json\nColumnHeaders: on\n'
        return request

    def columns(self, *args):
        self._columns = args
        return self

    def filter(self, filter_str):
        self._filters.append(filter_str)
        return self

    def stats(self, stats_str):
        self._stats.append(stats_str)
        return self

class Socket(object):
    def __init__(self, peer):
        self.peer = peer

    def __getattr__(self, name):
        return Query(self, name)

    def call(self, request):
        try:
            if len(self.peer) == 2:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            else:
                s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            s.connect(self.peer)
            s.send(request)
            s.shutdown(socket.SHUT_WR)
            rawdata = s.makefile().read()
            if not rawdata:
                return []
            data = json.loads(rawdata)
            return [dict(zip(data[0], value)) for value in data[1:]]
        finally:
            s.close()

#
# End MKLivestatus Helper
#

sites = load_sites()
sockets = {}
localsocket = Socket(localsocketname)
for siteid, sitedata in sites.items():
    if 'socket' in sitedata:
        if type(sitedata['socket']) == str:
            if sitedata['socket'].startswith('unix:'):
                sockets[siteid] = Socket(sitedata['socket'][5:])
            if sitedata['socket'].startswith('tcp:'):
                host, port = sitedata['socket'][4:].split(':')
                sockets[siteid] = Socket((host, int(port)))
        if type(sitedata['socket']) == tuple and sitedata['socket'][0] == 'proxy':
            sockets[siteid] = Socket(os.path.join(home, 'tmp/run/liveproxy', siteid))
    else:
        sockets[siteid] = localsocket
if sockets:
    queries = sockets
else:
    queries = { '': localsocket }
        
print('<<<check_mk>>>')
print('Version: agent_perfcalc-3.2')
print('<<<perfcalc>>>')

for servicespec in params['servicespecs']:
    perfdata = {}
    unit = {}
    hosts = []
    for dsname in servicespec['datasource']:
        perfdata[dsname] = []
    for siteid, query in queries.items():
        query = query.services

        if 'hosttags' in servicespec and servicespec['hosttags']:
            for tag in servicespec['hosttags']:
                query = query.filter('host_custom_variables ~ TAGS (^|[ ])%s($|[ ])' % lqencode(tag))
            query = query.filter('And: %d' % len(servicespec['hosttags']))
        if 'host' in servicespec and servicespec['host']:
            for host in servicespec['host']:
                if host[0] == '~':
                    query = query.filter('host_name ~ ^%s' % host[1:])
                else:
                    query = query.filter('host_name = %s' % host)
            query = query.filter('Or: %d' % len(servicespec['host']))
        if 'hosttags' in servicespec and 'host' in servicespec and servicespec['hosttags'] and servicespec['host']:
            query = query.filter('And: 2')

        query = query.filter('description = %s' % servicespec['service']).columns('host_name perf_data')
        for result in query.call():
            for pd in result['perf_data'].split():
                dsname, value = pd.split('=')
                if dsname in servicespec['datasource']:
                    curvalue, crit, warn, minvalue, maxvalue = value.split(';')
                    if len(curvalue) > 1:
                        for i in range(len(curvalue)-1, -1, -1):
                            try:
                                tmp = int(curvalue[i])
                                break
                            except:
                                continue
                    else:
                        i = 1
                    perfdata[dsname].append(float(curvalue[:i]))
                    unit[dsname] = curvalue[i+1:]
            if siteid:
                hosts.append("%s:%s" % (siteid, result['host_name']))
            else:
                hosts.append(result['host_name'])

    print('service %s %s' % ( servicespec['service'], servicespec['operator']))
    print('host %s' % " ".join(hosts))
    if hosts:
        for dsname, values in perfdata.items():
            if servicespec['operator'] == 'sum':
                value = math.fsum(values)
            elif servicespec['operator'] == 'min':
                value = min(values)
            elif servicespec['operator'] == 'max':
                value = max(values)
            elif servicespec['operator'] == 'ave':
                value = math.fsum(values) / len(values)
            print('ds %s %s%s' % (dsname, value, unit[dsname]))
