#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2019 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def parse_jenkinsjobs(info):
    data = eval(" ".join([item for sublist in info for item in sublist]))
    return data

def inventory_jenkinsjobs(parsed):
    for name, job in parsed.iteritems():
        if job['data'].get('buildable', False):
            yield name, {}

@get_parsed_item_data
def check_jenkinsjobs(_no_item, _no_params, data):
    job = data['data']

    yield 0, job['displayName']

    lastUnsuccessfulBuild = job.get('lastUnsuccessfulBuild', {'number': 0})
    if not lastUnsuccessfulBuild:
        lastUnsuccessfulBuild = {'number': 0}
    lastUnsuccessfulBuild = lastUnsuccessfulBuild.get('number', 0)
    lastStableBuild = job.get('lastStableBuild', {'number': 0})
    if not lastStableBuild:
        lastStableBuild = {'number': 0}
    lastStableBuild = lastStableBuild.get('number', 0)
    numFailedBuilds = 0
    if lastUnsuccessfulBuild > 0:
        numFailedBuilds = lastUnsuccessfulBuild - lastStableBuild
    if numFailedBuilds > 0:
        yield 1, "%d failed builds" % numFailedBuilds

    lastCompletedBuild = job.get('lastCompletedBuild', {'data': None}).get('data', {})
    if lastCompletedBuild:
        yield 0, "last complete build started at %s" % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(lastCompletedBuild['timestamp']/1000.0))
        yield 0, "completed at %s" % time.strftime('%Y-%m-%d %H:%M:%S', time.localtime((lastCompletedBuild['timestamp']+lastCompletedBuild['duration'])/1000.0))
        if lastCompletedBuild.get('result') != u'SUCCESS':
            yield 2, lastCompletedBuild.get('result')
        art = lastCompletedBuild.get('artifacts', {})
        checkmkart = art.get('checkmk.txt', {})
        for error in checkmkart.get('error', []):
            yield 2, error
        for metric, value in checkmkart.get('perfdata', {}).iteritems():
            yield 0, None, [(metric, value)]
    else:
        yield 1, "no completed build"

check_info["jenkinsjobs"] = {
    'parse_function'        : parse_jenkinsjobs,
    'check_function'        : check_jenkinsjobs,
    'inventory_function'    : inventory_jenkinsjobs,
    'service_description'   : 'Jenkins Job %s',
    'has_perfdata'          : True,
}
