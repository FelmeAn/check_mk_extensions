#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2019 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import requests
import urllib
import argparse
import pprint

class JenkinsAPI(requests.Session):
    def get_build_artifacts(self, build):
        c = {}
        for a in build['artifacts']:
            resp = self.get("%s/artifact/%s" % (build['url'], a['relativePath']))
            if resp.status_code == 200:
                c[a['fileName']] = resp.text
        return c
    
    def get_build_data(self, url):
        print(url)

        resp = self.get(url)
        a = None

        if resp.status_code == 200:
            build = resp.json()

            pprint.pprint(build)

            a = self.get_build_artifacts(build)
        return a
            
    def get_job_data(self, url):
        print(url)

        resp = self.get(url)

        if resp.status_code == 200:
            job = resp.json()

            pprint.pprint(job)

            buildname = job['name']
            lastUnsuccessfulBuild = job.get('lastUnsuccessfulBuild', {'number': 0}).get('number', 0)
            lastStableBuild = job.get('lastStableBuild', {'number': 0}).get('number', 0)
            numFailedBuilds = 0
            if lastUnsuccessfulBuild > 0:
                numFailedBuilds = lastUnsuccessfulBuild - lastStableBuild
            if numFailedBuilds < 0:
                numFailedBuilds = 0

            d = None
            if job['lastCompletedBuild']['number'] == job['lastSuccessfulBuild']['number']:
                d = self.get_build_data(job['lastCompletedBuild']['url'] + 'api/json')
            
            return {'failed': numFailedBuilds, 'build': d}
        return None

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--url', required=True, help='Jenkins base URL')
    parser.add_argument('-u', '--username')
    parser.add_argument('-p', '--password')
    parser.add_argument('-a', '--authtoken')
    parser.add_argument('-j', '--job', required=True, help='Jenkins job name')

    args = parser.parse_args()

    pprint.pprint(args)

    s = JenkinsAPI()
    
    if args.username and args.password:
        s.auth = (args.username, args.password)

    if args.authtoken:
        s.headers.update({'Authorization': "Bearer %s" % args.authtoken})

    jobstatusurl = "%s/job/%s/api/json" % (args.url, urllib.quote(args.job))

    res = s.get_job_data(jobstatusurl)
    if res:
        print res
