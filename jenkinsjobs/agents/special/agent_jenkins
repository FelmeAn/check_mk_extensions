#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2019 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import argparse
import requests
import urllib
import cPickle
import base64
import re
import pprint

class JenkinsAPI(requests.Session):
    def get_build_artifacts(self, build):
        c = {}
        for a in build['artifacts']:
            if a['fileName'] == 'checkmk.txt':
                resp = self.get("%s/artifact/%s" % (build['url'], a['relativePath']))
                if resp.status_code == 200:
                    c[a['fileName']] = resp.json()
        return c

    def get_build_data(self, url):
        resp = self.get(url + '/api/json')
        build = {}
        if resp.status_code == 200:
            build = resp.json()
            build['artifacts'] = self.get_build_artifacts(build)
        return build

    def get_job_data(self, url):
        resp = self.get(url + '/api/json')
        job = {}
        if resp.status_code == 200:
            job = resp.json()
            if 'lastCompletedBuild' in job:
                job['lastCompletedBuild'][u'data'] = self.get_build_data(job['lastCompletedBuild']['url'])
        return job

    def get_host_jobs(self, servicespecs):
        jobres = {}
        hosts = {}
        for host in servicespecs['hosts']:
            hosts[host['hostname']] = {}
            for job in host['jobs']:
                jobres[re.compile(job)] = host['hostname']

        resp = self.get(servicespecs['url'] + '/api/json')
        if resp.status_code == 200:
            data = resp.json()

            if 'jobs' in data:
                for job in data['jobs']:
                    for jobre, host in jobres.iteritems():
                        if jobre.match(job['name']):
                            job[u'data'] = self.get_job_data(job['url'])
                            if args.debug:
                                print "job = ",
                                pprint.pprint(job)
                            hosts[host][job['name']] = job
                            if u'jobs' in job[u'data']:
                                for subjob in job[u'data'][u'jobs']:
                                    sj = subjob.copy()
                                    sj[u'data'] = self.get_job_data(subjob['url'])
                                    hosts[host]["%s/%s" % (job['name'], subjob['name'])] = sj
        return hosts

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username')
    parser.add_argument('-p', '--password')
    parser.add_argument('-a', '--authtoken')
    parser.add_argument('-d', '--debug', action="store_true")
    parser.add_argument('params', nargs='+', help='base64 encoded cPickled Python dictionary')
    args = parser.parse_args()

    # Parameters are base64 encoded cPickle data
    params = cPickle.loads(base64.decodestring('\n'.join(args.params)))

    if args.debug:
        pprint.pprint(args)
        pprint.pprint(params)

    s = JenkinsAPI()

    if 'auth' in params['servicespecs']:
        if type(params['servicespecs']["auth"]) == tuple:
            s.auth = params['servicespecs']['auth']
        else:
            s.headers.update({'Authorization': "Bearer %s" % params['servicespecs']["auth"]})

    if args.debug:
        pprint.pprint(s)
        pprint.pprint(s.headers)
            
    hosts = s.get_host_jobs(params['servicespecs'])
    for host, jobs in hosts.iteritems():
        if host and params['hostname'] != host:
            print '<<<<%s>>>>' % host
        print '<<<jenkinsjobs>>>'
        pprint.pprint(jobs)
        if host and params['hostname'] != host:
            print '<<<<>>>>'

