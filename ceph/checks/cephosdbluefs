#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2017 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_cephosdbluefs(info):
    import json
    parsed = {}
    for line in info:
        try:
            parsed.update(json.loads("".join([item for item in line])))
        except ValueError:
            pass
    return parsed

def inventory_cephosdbluefs(area, parsed):
    for osdid, perf in parsed.items():
        if 'bluefs' in perf and perf['bluefs']['%s_total_bytes' % area.lower()] > 0:
            yield "OSD %s %s" % (osdid, area), {}

def check_cephosdbluefs(area, item, params, parsed):
    for osdid, perf in parsed.items():
        if item == "OSD %s %s" % (osdid, area) and 'bluefs' in perf:
            size_mb = perf['bluefs']['%s_total_bytes' % area.lower()] / 1024.0 / 1024.0
            avail_mb = ( perf['bluefs']['%s_total_bytes' % area.lower()] - perf['bluefs']['%s_used_bytes' % area.lower()] ) / 1024.0 / 1024.0
            yield df_check_filesystem_list(item, params, [ (item, size_mb, avail_mb, 0) ])

check_info["cephosdbluefs"] = {
    'parse_function'         : parse_cephosdbluefs,
    'check_function'         : lambda item, params, parsed: check_cephosdbluefs('DB', item, params, parsed),
    'inventory_function'     : lambda parsed: inventory_cephosdbluefs('DB', parsed),
    'service_description'    : 'Ceph %s',
    'has_perfdata'           : True,
    'group'                  : 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
    'includes'               : [ 'size_trend.include', 'df.include' ],
}

check_info["cephosdbluefs.wal"] = {
    'check_function'         : lambda item, params, parsed: check_cephosdbluefs('WAL', item, params, parsed),
    'inventory_function'     : lambda parsed: inventory_cephosdbluefs('WAL', parsed),
    'service_description'    : 'Ceph %s',
    'has_perfdata'           : True,
    'group'                  : 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
    'includes'               : [ 'size_trend.include', 'df.include' ],
}

check_info["cephosdbluefs.slow"] = {
    'check_function'         : lambda item, params, parsed: check_cephosdbluefs('Slow', item, params, parsed),
    'inventory_function'     : lambda parsed: inventory_cephosdbluefs('Slow', parsed),
    'service_description'    : 'Ceph %s',
    'has_perfdata'           : True,
    'group'                  : 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
    'includes'               : [ 'size_trend.include', 'df.include' ],
}
