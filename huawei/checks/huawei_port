#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2016 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#
# Generic Port check includes FC, SAS and iSCSI
#

def parse_huawei_port(info):
    portinfo = {}
    for line in info:
        if line[10] != '':
            # FC-Port
            portname = huawei_port_itemname(line[10])
            if portinfo.has_key(portname):
                raise KeyError(portname)
            portinfo[portname] = ['FC'] + line[1:10] + line[10:17]
        elif line[17] != '':
            # SAS-Port
            portname = huawei_port_itemname(line[17])
            if portinfo.has_key(portname):
                raise KeyError(portname)
            portinfo[portname] =  ['SAS'] + line[1:10] + line[17:23]
        elif line[23] != '':
            # iSCSI-Port
            portname = huawei_port_itemname(line[23])
            if portinfo.has_key(portname):
                raise KeyError(portname)
            portinfo[portname] = ['iSCSI'] + line[1:10] + line[23:]
    return portinfo

def inventory_huawei_port(parsed):
    for port in parsed:
        if parsed[port][11] != '0':
            params = { 'status': parsed[port][11],
                       'logicType': parsed[port][12],
                       }
            if parsed[port][0] == 'FC':
                params.update( { 'configRate': parsed[port][13],
                                 'speedRate': parsed[port][14],
                                 'mode': parsed[port][16],
                                 } )
            if parsed[port][0] == 'SAS':
                params.update( { 'configRate': parsed[port][13],
                                 'speedRate': parsed[port][14],
                                 } )
            if parsed[port][0] == 'iSCSI':
                params.update( { 'ip': parsed[port][13],
                                 'netmask': parsed[port][14],
                                 'bindMode': parsed[port][15],
                                 } )
            yield port, params

def check_huawei_port(item, params, parsed):
    if item in parsed:
        portinfo = parsed[item]
        msg = "%s-Port" % portinfo[0]
        #
        # portinfo:
        #
        #	0	type
        #	1	hwPerfPortLocation
        #	2	ReadIOPS
        #	3	WriteIOPS
        #	4	ReadTraffic
        #	5	WriteTraffic
        #	6	PortIfIndex
        #	7	PortType
        #	8	PortStatus
        #	9	PortPhysAddress
        #	10	PortID
        #	11	PortStatus
        #	12	LogicType
        #	13	IP / ConfigRate
        #	14	Mask / SpeedRate
        #	15	BindMode / WWN
        #	16	PortMode
        #
        if portinfo[1] != '':
            msg += " @ %s" % portinfo[1]
        yield (0, msg)
        if portinfo[0] in [ 'FC', 'SAS' ]:
            yield (0, 'WWN: %s' % portinfo[15])
            yield (0, 'configured rate: %s' % huawei_port_rates.get(portinfo[13], 'unknown'))
            if portinfo[13] != params['configRate']:
                yield (1, 'has changed from %s(!)' % huawei_port_rates[params['configRate']])
            yield (0, 'speed: %s' % huawei_port_rates.get(portinfo[14], 'unknown'))
            if portinfo[14] != params['speedRate']:
                yield (1, 'has changed from %s(!)' % huawei_port_rates[params['speedRate']])
            if portinfo[0] == 'FC':
                yield (0, 'port mode: %s' % huawei_port_modes.get(portinfo[16], 'unknown'))
                if portinfo[16] != params['mode']:
                    yield (2, 'has changed from %s(!!)' % huawei_port_modes[params['mode']])
        if portinfo[0] in [ 'iSCSI' ]:
            yield (0, "IP: %s/%s" % (portinfo[13], portinfo[14]))
            if portinfo[13] != params['ip']:
                yield (2, 'IP has changed from %s' % params['ip'])
            if portinfo[14] != params['netmask']:
                yield (2, 'Netmask has changed from %s' % params['netmask'])
            if portinfo[9] != '':
                yield (0, ' %s' % portinfo[9])
        res = 0
        if portinfo[11] == '2':
            res = 2
        yield (res, 'state is %s' % huawei_port_states.get(portinfo[11], 'unknown'))
        if portinfo[11] != params['status']:
            yield (1, 'has changed from %s(!)' % huawei_port_states[params['status']])
        yield (0, 'type is %s' % huawei_port_logictypes.get(portinfo[12], 'unknown'))
        if portinfo[12] != params['logicType']:
            yield (2, 'has changed from %s(!!)' % huawei_port_logictypes[params['logicType']])
        if portinfo[2] != '':
            read_bytes_per_sec = saveint(portinfo[4]) * 1024 * 1024
            write_bytes_per_sec = saveint(portinfo[5]) * 1024 * 1024
            iops = saveint(portinfo[2]) + saveint(portinfo[3])
            perfdata = [ ( 'read', read_bytes_per_sec ),
                         ( 'write', write_bytes_per_sec ),
                         ( 'iops', iops ),
                         ]
            yield (0, "read %s/sec, write %s/sec, IOPS total %s/sec" % (get_bytes_human_readable(read_bytes_per_sec),
                                                                        get_bytes_human_readable(write_bytes_per_sec),
                                                                        iops),
                   perfdata)

check_info['huawei_port'] = {
    'inventory_function'    : inventory_huawei_port,
    'check_function'        : check_huawei_port,
    'parse_function'        : parse_huawei_port,
    'service_description'   : 'Port %s',
    'has_perfdata'          : True,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1', [ '21.5.1.1',    # 0  hwPerfPortIfIndex
                                                            '21.5.1.11',   # 1  hwPerfPortLocation
                                                            '21.5.1.4',    # 2  hwPerfPortReadIOPS
                                                            '21.5.1.5',    # 3  hwPerfPortWriteIOPS
                                                            '21.5.1.7',    # 4  hwPerfPortReadTraffic
                                                            '21.5.1.8',    # 5  hwPerfPortWriteTraffic
                                                            '19.8.11.1.1', # 6  hwStorageFrontEndHostPortIfIndex
                                                            '19.8.11.1.2', # 7  hwStorageFrontEndHostPortType
                                                            '19.8.11.1.3', # 8  hwStorageFrontEndHostPortStatus
                                                            '19.8.11.1.4', # 9  hwStorageFrontEndHostPortPhysAddress
                                                            '19.8.7.1.3',  # 10 hwStorageFCPortID
                                                            '19.8.7.1.4',  # 11 hwStorageFCPortStatus
                                                            '19.8.7.1.8',  # 15 hwStorageFCPortLogicType
                                                            '19.8.7.1.5',  # 12 hwStorageFCPortConfigRate
                                                            '19.8.7.1.9',  # 16 hwStorageFCPortSpeedRate
                                                            '19.8.7.1.7',  # 14 hwStorageFCPortWWN
                                                            '19.8.7.1.6',  # 13 hwStorageFCPortMode
                                                            '19.8.8.1.3',  # 17 hwStorageSASPortID
                                                            '19.8.8.1.4',  # 18 hwStorageSASPortStatus
                                                            '19.8.8.1.7',  # 21 hwStorageSASPortLogicType
                                                            '19.8.8.1.5',  # 19 hwStorageSASPortConfigRate
                                                            '19.8.8.1.8',  # 22 hwStorageSASPortSpeedRate
                                                            '19.8.8.1.6',  # 20 hwStorageSASPortWWN
                                                            '19.8.9.1.3',  # 23 hwStorageISCSIPortID
                                                            '19.8.9.1.4',  # 24 hwStorageISCSIPortStatus
                                                            '19.8.9.1.8',  # 28 hwStorageISCSIPortLogicType
                                                            '19.8.9.1.5',  # 25 hwStorageISCSIPortIP
                                                            '19.8.9.1.6',  # 26 hwStorageISCSIPortNetMask
                                                            '19.8.9.1.7',  # 27 hwStorageISCSIPortBindMode
                                  ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
    'includes'              : [ 'huawei.include' ],
}

